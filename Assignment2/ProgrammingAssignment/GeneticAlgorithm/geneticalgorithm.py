# -*- coding: utf-8 -*-
"""geneticalgorithm.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18KKUbX5IIJn1u3WEd40j3pThRKxQ5v-r
"""

from random import randint, random
import math
# FUnction to check a number is a perfect square or not
def is_square(integer):
    root = math.sqrt(integer)
    return integer == int(root + 0.5) ** 2

#Function to compute the closet square number
def square(integer):
    root = math.sqrt(integer)
    return int(root + 0.5) ** 2  
#function to generate random list of individuals 
def individual(length, min, max):
  l = []
  while length > 0:
    x = randint(min,max)
    if is_square(x):
      l.append(x)
      length -= 1
  return l

#Function to generate population of Individuals
def population(count, length, min, max):
  return [ individual(length, min, max) for x in range(count) ]

#function that returns the value between sum of numbers in the individual list and the target
def fitness(individual, target):
  sum = 0
  for value in individual:
    sum += value
  return abs(target-sum)

#Function to grade every evlolution
def grade(pop, target):
  summed = 0
  for x in pop:
    value = fitness(x, target)
    summed += value
  return summed / (len(pop) * 1.0)

def evolve(pop, target, retain=0.2, random_select=0.05, mutate=0.01):
    graded = [ (fitness(x, target), x) for x in pop]
    graded = [ x[1] for x in sorted(graded)]
    retain_length = int(len(graded)*retain)
    parents = graded[:retain_length]
    
    # randomly add other individuals to promote genetic diversity
    for individual in graded[retain_length:]:
        if random_select > random():
            parents.append(individual)
            
    # mutate some individuals
    for individual in parents:
        if mutate > random():
            pos_to_mutate = randint(0, len(individual)-1)
            # this mutation is not ideal, because it
            # restricts the range of possible values,
            # but the function is unaware of the min/max
            # values used to create the individuals,
            individual[pos_to_mutate] = randint(
                min(individual), max(individual))
    
    # crossover parents to create children
    parents_length = len(parents)
    desired_length = len(pop) - parents_length
    children = []
    while len(children) < desired_length:
        male = randint(0, parents_length-1)
        female = randint(0, parents_length-1)
        if male != female:
            male = parents[male]
            female = parents[female]
            half = int(len(male) / 2)
            child = male[:half] + female[half:]
            children.append(child)

    parents.extend(children)
    return parents

# change trget, p_count, i_length, i_min, i_max to check for different set of data
target = 100
p_count = 100
i_length = 5
i_min = 0
i_max = 100
p = population(p_count, i_length, i_min, i_max)
fitness_history = [grade(p, target)]
for i in range(100):
  p = evolve(p, target)
  fitness_history.append(grade(p, target))
squarelist = [int(square(i)) for i in p[-1]]
numberlist = [int(math.sqrt(i)) for i in p[-1]]

print("List of Square of ",i_length,"Numbers",squarelist)
print("List of ",i_length,"Numbers",numberlist)